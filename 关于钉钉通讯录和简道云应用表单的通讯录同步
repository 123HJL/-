#-*-coding:UTF-8-*-
import requests
import json
import time


class APIUtils:
    verify=False and requests.packages.urllib3.disable_warnings()
    WEBSITE = "https://www.jiandaoyun.com"
    RETRY_IF_LIMITED = True
    url="https://oapi.dingtalk.com"
    # 构造函数    
    def __init__(self, appId, entryId,api_key,AppKey,AppSecret):
        self.url_get_widgets = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/widgets'
        self.url_get_data = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/data'
        self.url_retrieve_data = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/data_retrieve'
        self.url_update_data = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/data_update'
        self.url_create_data = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/data_create'
        self.url_delete_data = APIUtils.WEBSITE + '/api/v1/app/' + appId + '/entry/' + entryId + '/data_delete'
        self.api_key = api_key
        self.url_getToke=APIUtils.url+'/gettoken?appkey='+AppKey+'&appsecret='+AppSecret        

    # 带有认证信息的请求头
    def get_req_header(self):
        return {
            'Authorization': 'Bearer ' + self.api_key,
            'Content-Type': 'application/json;charset=utf-8'
        }

    # 发送http请求
    def send_request(self, method, request_url, data):
        headers = self.get_req_header()
        if method == 'GET':
            res = requests.get(request_url, params=data, headers=headers, verify=False)
        if method == 'POST':
            res = requests.post(request_url, data=json.dumps(data), headers=headers, verify=False)
        result = res.json()
        if res.status_code >= 400:
            if result['code'] == 8303 and APIUtils.RETRY_IF_LIMITED:

                time.sleep(5)
                return self.send_request(method, request_url, data)
            else:
                raise Exception('error', result)
        else:
            return result
    
    # 获取表单字段
    def get_form_widgets(self):
        result = self.send_request('POST', self.url_get_widgets, {})
        return result['widgets']

    # 根据条件获取表单中的数据
    def get_form_data(self, dataId, limit, fields, data_filter):
        result = self.send_request('POST', self.url_get_data, {
               'data_id': dataId,
            'limit': limit,
            'fields': fields,
            'filter': data_filter
        })
        return result['data']

    # 获取表单中满足条件的所有数据
    def get_all_data(self, fields, data_filter):
        form_data = []
        # 递归取下一也数据
        def get_next_page(dataId):
            data = self.get_form_data(dataId, 100, fields, data_filter)
            if data:
                for v in data:
                    form_data.append(v)
                dataId = data[len(data) - 1]['_id']
                get_next_page(dataId)
        get_next_page('')
        return form_data

    # 检索一条数据
    def retrieve_data(self, dataId):
        result = self.send_request('POST', self.url_retrieve_data, {
             'data_id': dataId
       })
        return result['data']

    # 创建一条数据
    def create_data(self, data):
        result = self.send_request('POST', self.url_create_data, {
            'data': data
        })
        return result['data']

    # 更新数据
    def update_data(self, dataId, data):
        result = self.send_request('POST', self.url_update_data, {
            'data_id': dataId,
            'data': data
        })
        return result['data']

    # 删除数据
    def delete_data(self, dataId):
        result = self.send_request('POST', self.url_delete_data, {
            'data_id': dataId
        })
        return result

    # 调用钉钉接口

    # 获取验证access_toke
    def getToke(self,corpid,corpsecret):
        result =self.send_request('GET',self.url_getToke,{})
        return result

    #  获取所有部门的信息
    def get_department(self,url):
        result =self.send_request('GET',url,{})
        return result

    # 获取部门下的员工列表
    def get_userlist(self,url):
        result =self.send_request('GET',url,{})
        return result

    # 根据员工id获取信息
    def get_users(self,url):
        result =self.send_request('GET',url,{})
        return result

    # 根据员工所属部门id获取部门名字
    def get_depname(self,url):
        result =self.send_request('GET',url,{})
        return result

if __name__ == '__main__':
    #在简道云中获取
    appId = 'appId'
    entryId = 'entryId'
    api_key = 'api_key'
    #在钉钉中创建的应用获取（注意白名单ip）
    AppKey='AppKey'
    AppSecret='AppSecret'
    api = APIUtils(appId, entryId, api_key, AppKey,AppSecret)   

    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    # 禁用安全请求警告
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

    # 获取表单字段
    widgets =api.get_form_widgets()
    #print('获取表单字段：')
    w= json.dumps(widgets, ensure_ascii=False)
    #print(w)
    # 获取表单的所有数据进行删除
    form_data = api.get_all_data([], {})
    print('获取表单所有数据的id：')
    for v in form_data:
        delete_id=v['_id']
        #print(delete_id)     
        # 根据id删除表单的数据
        result = api.delete_data(delete_id)
        #print('删除单条数据：')
        #print(result) 
    
    
    #print('获取钉钉的数据：')

    # 获取钉钉的数据
    access_token=api.getToke(AppKey,AppSecret)
    a= json.dumps(access_token, ensure_ascii=False)
    b = json.loads(a)
    x =b.get('access_token')
    # print('获取access_token:')
    #print(x)

    # 获取所有部门信息
    #print('获取部门信息')
    access=str(x)
    url="https://oapi.dingtalk.com/department/list?access_token="+access
    dep=api.get_department(url)
    c=json.dumps(dep,ensure_ascii=False)
    data=json.loads(c)
    # print(c)
    f=data['department']
    # 循环获取部门的员工列表  
    for colour in f:
        departmentid=colour['id']
        id=str(departmentid)
        #print('部门id：'+id)

        # 获取部门下的员工列表
        dep_url="https://oapi.dingtalk.com/user/getDeptMember?access_token="+access+"&deptId="+id
        user=api.get_userlist(dep_url)
        us=json.dumps(user,ensure_ascii=False)
        users=json.loads(us)
        userid=users['userIds']
        # 循环获取员工id
        for usid in userid:

                # 根据员工id获取信息
                usids=str(usid)
                #print('员工id：'+usids)
                user_url="https://oapi.dingtalk.com/user/get?access_token="+access+"&userid="+usid
                staff=api.get_users(user_url)
                staffs=json.dumps(staff,ensure_ascii=False)
                #print(staffs)
                #姓名
                names=staff['name']
                name=(names).encode("utf-8")
                #联系电话
                mobile=(staff['mobile']).encode("utf-8")
                # 获取入职时间时间戳（毫秒）
                #times=staff['hiredDate']
                #ti=int(times)/1000
                #timeArray = time.localtime(ti)
                #Entrytime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)

                # 所属部门id
                department=staff['department']
                deptid=str(department).replace('[','').replace(']','')

                #根据员工所属部门id获取部门名字
                depname_url="https://oapi.dingtalk.com/department/get?access_token="+access+"&id="+id
                depnames=api.get_depname(depname_url)
                dpnames=json.dumps(depnames,ensure_ascii=False)
                dp=json.loads(dpnames)
                #print(dp)
                #所属部门
                dpname=(depnames['name']).encode("utf-8")
                #print('员工信息：')
                #print('入职时间：'+Entrytime)
                #print('姓名：'+name)
                #print('部门：'+dpname)
                #print('联系电话：'+mobile)
                # 根据员工姓名和部门判断是添加还是更新信息
                 
                data = api.get_form_data('5b237267b22ab14884086cc9', 100, ['_widget_1545551667035', '_widget_1545551667066'], {
                        'rel': 'and',
                        'cond': [{
                                'field': '_widget_1545551667035',
                                'method': 'eq',
                                'value': name
                                },{
                                'field':'_widget_1545551667066',
                                'method': 'eq',
                                'value': dpname
                                }]
                        })
                #print('按员工姓名和部门查询：')
                d=json.dumps(data, ensure_ascii=False) 
                for v in data:
                        up_id=v['_id']
                        #print(up_id)
                #if判断是否存在该员工，存在更新数据，不存在添加数据
                if d=="[]":
                         # 创建单条数据
                        data = {
                                '_widget_1545551666995': {
                                   'value':'无' 
                                },
                                '_widget_1545551667035': {
                                   'value': name
                                },
                                '_widget_1545551667051': {
                                   'value': mobile
                                },
                                '_widget_1545551667066': {
                                   'value':  dpname
                                },
                                '_widget_1545551667110': {
                                   'value': '无'
                                },
                                '_widget_1545551667127': {
                                   'value': '无'
                                },
                                '_widget_1545551667143': {
                                   'value': '无'
                                }
                         }
                        create_data = api.create_data(data)
                        #print('添加员工信息！')
                        #print(create_data)
    
                else:
                         # 更新单条数据
                        update = {
                                '_widget_1545551666995': {
                                   'value':'无'
                                },
                                '_widget_1545551667035': {
                                   'value': name
                                },
                                '_widget_1545551667051': {
                                   'value': mobile
                                },
                                '_widget_1545551667066': {
                                   'value':  dpname
                                },
                                '_widget_1545551667110': {
                                   'value': '无'
                                },
                                '_widget_1545551667127': {
                                   'value': '无'
                                },
                                '_widget_1545551667143': {
                                   'value': '无'
                                }}
                        result = api.update_data(up_id, update)
                       # print('更新员工信息！')
                        r= json.dumps(result, ensure_ascii=False)
                       # print(r)



        #print
